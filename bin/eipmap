#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'eipmap'
require 'optparse'

Version = Eipmap::VERSION
DEFAULT_FILENAME = 'EIPfile'

mode = nil
file = DEFAULT_FILENAME
output_file = '-'

options = {
  :dry_run => false,
  :color   => true,
  :debug   => false,
}

ARGV.options do |opt|
  begin
    access_key = nil
    secret_key = nil
    region = nil
    profile_name = nil
    credentials_path = nil

    opt.on('-p', '--profile PROFILE_NAME')  {|v| profile_name                  = v       }
    opt.on(''  , '--credentials-path PATH') {|v| credentials_path              = v       }
    opt.on('-k', '--access-key ACCESS_KEY') {|v| access_key                    = v       }
    opt.on('-s', '--secret-key SECRET_KEY') {|v| secret_key                    = v       }
    opt.on('-r', '--region REGION')         {|v| region                        = v       }
    opt.on('-a', '--apply')                 {    mode                          = :apply  }
    opt.on('-f', '--file FILE')             {|v| file                          = v       }
    opt.on('',   '--dry-run')               {    options[:dry_run]             = true    }
    opt.on('',   '--allow-reassociation')   {    options[:allow_reassociation] = true    }
    opt.on('-e', '--export')                {    mode                          = :export }
    opt.on('-o', '--output FILE')           {|v| output_file                   = v       }
    opt.on(''  , '--no-color')              {    options[:color]               = false   }
    opt.on(''  , '--debug')                 {    options[:debug]               = true    }
    opt.parse!

    aws_opts = {}

    if access_key and secret_key
      aws_opts.update(
        :access_key_id => access_key,
        :secret_access_key => secret_key
      )
    elsif profile_name or credentials_path
      credentials_opts = {}
      credentials_opts[:profile_name] = profile_name if profile_name
      credentials_opts[:path] = credentials_path if credentials_path
      credentials = Aws::SharedCredentials.new(credentials_opts)
      aws_opts[:credentials] = credentials
    elsif (access_key and !secret_key) or (!access_key and secret_key) or mode.nil?
      puts opt.help
      exit 1
    end

    aws_opts[:region] = region if region
    Aws.config.update(aws_opts)
  rescue => e
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end

String.colorize = options[:color]

if options[:debug]
  Aws.config.update(
    :http_wire_trace => true,
    :logger => Eipmap::Logger.instance
  )
end

begin
  logger = Eipmap::Logger.instance
  logger.set_debug(options[:debug])
  client = Eipmap::Client.new(options)

  case mode
  when :export
    if output_file == '-'
      logger.info('# Export Logs')
      puts client.export(options)
    else
      logger.info("Export Logs to `#{output_file}`")
      open(output_file, 'wb') {|f| f.puts client.export(options) }
    end
  when :apply
    unless File.exist?(file)
      raise "No EIPfile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to Elastic IP Addresses"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    logger.info('No change'.intense_blue) unless updated
  else
    raise 'must not happen'
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts("[ERROR] #{e.message}".red)
    exit 1
  end
end
